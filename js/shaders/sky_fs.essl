Shader.source[document.currentScript.src.split('js/shaders/')[1]] = `
	precision highp float;
	varying vec2 texCoord;
	varying vec4 worldPos;
	varying vec3 worldNormal;
  varying vec4 rayDir;
	uniform sampler2D probeTexture;
	uniform vec4 lightPos[3]; // xyz is the direction, w is 0
	uniform vec4 mainDir[3];
	uniform vec4 lightPowerDensity[3]; // w ignored
	uniform vec3 cameraPos;
	uniform mat4 quadrics[150];
	uniform vec4 brdfs[75];
	const int numShapes = 53;
	const int numLights = 3;
	const bool shadow = true;

	mat4 cut = mat4(0, 0, 0, 0,
									0, 1, 0, 0,
									0, 0, 0, 0,
									0, 3, 0, 2.21);

	mat4 slab = mat4(0, 0, 0, 0,
									 0, 0, 0, 0,
									 0, 0, 1, 0,
									 0, 0, 0, -49);

	bool masking(vec3 r) {
		float y = mod(r.y, .08);
		float a = 0.0;
		if (abs(r.x/r.z) >= (a*y) && abs(r.x/r.z) <= ((a+3.0)*y) && r.y <= -1.65){
			return true;
		} else {return false;}
	}

	float intersectClippedQuadric(mat4 A, mat4 B, vec4 e, vec4 d) {
		float a = dot(d * A, d);
		float b = dot(d * A, e) + dot(e * A, d);
		float c = dot(e * A, e);
		float D = b*b-4.0*a*c;

		float a2 = dot(d * B, d);
		float b2 = dot(d * B, e) + dot(e * B, d);
		float c2 = dot(e * B, e);
		//float D2 = b2*b2-4.0*a2*c2;

		if (D < 0.0) {
			return -1.0;
		} else {
		 float t1 = (-b+sqrt(D))/(2.0*a);
		 float t2 = (-b-sqrt(D))/(2.0*a);
		 float rBr1 = t1*t1*a2 + t1*b2 + c2;
		 float rBr2 = t2*t2*a2 + t2*b2 + c2;

		 if (rBr1 > 0.0) {
		 	t1 = -1.0;
		 }
		 if (rBr2 > 0.0) {
		 	t2 = -1.0;
		 }
		 if (t1 > 0.0 && (t1 < t2 || t2 < 0.0)) {
			return t1;
		 } else {
		 	return t2;
		 }
		}
	}

	float intersectLacedQuadric(mat4 A, mat4 B, vec4 e, vec4 d) {
		float a = dot(d * A, d);
		float b = dot(d * A, e) + dot(e * A, d);
		float c = dot(e * A, e);
		float D = b*b-4.0*a*c;

		float a2 = dot(d * B, d);
		float b2 = dot(d * B, e) + dot(e * B, d);
		float c2 = dot(e * B, e);
		//float D2 = b2*b2-4.0*a2*c2;

		if (D < 0.0) {
			return -1.0;
		} else {
		 float t1 = (-b+sqrt(D))/(2.0*a);
		 float t2 = (-b-sqrt(D))/(2.0*a);
		 float rBr1 = t1*t1*a2 + t1*b2 + c2;
		 float rBr2 = t2*t2*a2 + t2*b2 + c2;
		 vec3 pos1 = (e+d*t1).xyz;
		 vec3 pos2 = (e+d*t2).xyz;
		 float y1 = pos1.y;
		 float y2 = pos2.y;
		 // vec3 t1Vec = vec3((d*((t1-t2)/2.0)).x, y1, (d*((t1-t2)/2.0)).z);
		 // vec3 t2Vec = vec3((d*((t2-t1)/2.0)).x, y2, (d*((t2-t1)/2.0)).z);
		 vec3 t1Vec = vec3(pos1.x, y1, pos2.z);
		 vec3 t2Vec = vec3(pos2.x, y2, pos2.z);
		 //check level against threshold.
		 bool seeThrough1 = masking(t1Vec);
		 bool seeThrough2 = masking(t2Vec);

		 if (rBr1 > 0.0 || seeThrough1) {
			t1 = -1.0;
		 }
		 if (rBr2 > 0.0 || seeThrough2) {
			t2 = -1.0;
		 }
		 if (t1 > 0.0 && (t1 < t2 || t2 < 0.0)) {
			return t1;
		 } else {
			return t2;
		 }
		}
	}

	float intersectThreeQuadric(mat4 A, mat4 B, mat4 C, vec4 e, vec4 d) {
		float a = dot(d * A, d);
		float b = dot(d * A, e) + dot(e * A, d);
		float c = dot(e * A, e);
		float D = b*b-4.0*a*c;

		float a2 = dot(d * B, d);
		float b2 = dot(d * B, e) + dot(e * B, d);
		float c2 = dot(e * B, e);

		float a3 = dot(d * C, d);
		float b3 = dot(d * C, e) + dot(e * C, d);
		float c3 = dot(e * C, e);
		//float D2 = b2*b2-4.0*a2*c2;

		if (D < 0.0) {
			return -1.0;
		} else {
		 float t1 = (-b+sqrt(D))/(2.0*a);
		 float t2 = (-b-sqrt(D))/(2.0*a);
		 float rBr1 = t1*t1*a2 + t1*b2 + c2;
		 float rCr1 = t1*t1*a3 + t1*b3 + c3;
		 float rBr2 = t2*t2*a2 + t2*b2 + c2;
		 float rCr2 = t2*t2*a3 + t2*b3 + c3;

		 if (rBr1 > 0.0 || rCr1 > 0.0) {
		 	t1 = -1.0;
		 }
		 if (rBr2 > 0.0 || rCr2 > 0.0) {
		 	t2 = -1.0;
		 }
		 if (t1 > 0.0 && (t1 < t2 || t2 < 0.0)) {
			return t1;
		 } else {
		 	return t2;
		 }
		}
	}

	float findBetterHit(float t1, float t2) {
		if ((t1 < t2 || t2 == -1.0) && t1 > 0.0) {
			return t1;
		} else {return t2;}
	}

	bool findBestHit(vec4 e, vec4 d, out float bestT, out vec4 bestBrdf, out mat4 bestA) {
		bestT = -1.0;
		bestBrdf = vec4(0,0,0,0);
		for(int i=0;i<numShapes;i++) {
			mat4 A = quadrics[i*2];
			mat4 B = quadrics[i*2+1];
			vec4 curBrdf = brdfs[i];
			float t1, t2, curT;
			float t3 = -1.0; float t4 = -1.0;
			//for Multiple Clipper Quadrics!
			if (brdfs[i].w == 10.0) {
				t1 = intersectThreeQuadric(A, B, cut, e, d);
				t2 = intersectThreeQuadric(B, A, cut, e, d);
				t3 = intersectThreeQuadric(cut, B, A, e, d);
				curT = findBetterHit(findBetterHit(findBetterHit(t1, t2), t3), bestT);
			}
			else if (brdfs[i].w == 200.0) {
				t1 = intersectThreeQuadric(A, B, slab, e, d);
				t2 = intersectThreeQuadric(B, A, slab, e, d);
				t4 = intersectThreeQuadric(slab, B, A, e, d);
				curT = findBetterHit(findBetterHit(findBetterHit(t1, t2), t4), bestT);
			} else if (brdfs[i].w == 110.0) {
				t1 = intersectLacedQuadric(A, B, e, d);
				t2 = intersectClippedQuadric(B, A, e, d);
				curT = findBetterHit(findBetterHit(t1, t2), bestT);
			}
			else {
			//for normal single clipper Quadrics!
				t1 = intersectClippedQuadric(A, B, e, d);
				t2 = intersectClippedQuadric(B, A, e, d);
				curT = findBetterHit(findBetterHit(t1, t2), bestT);
			}
			if (curT != bestT) {
				bestBrdf = curBrdf;
				bestT = curT;
				if (curT == t1) {
					bestA = A;
				} else if (curT == t2) {
					bestA = B;
				} else if (t3 > 0.0 && curT == t3) {
					bestA = cut;
				} else if (t4 > 0.0 && curT == t4) {
					bestA = slab;
				}
			}
		}
		return bestT >= 0.0;
	}

	//for casting shadows. Easier computation.
	bool getBestHit(vec4 e, vec4 d) {
		float t1, t2, t3, t4;
		for(int i=0;i<numShapes;i++) {
			mat4 A = quadrics[i*2];
			mat4 B = quadrics[i*2+1];
			//for Multiple Clipper Quadrics!
			if (brdfs[i].w == 10.0) {
				t1 = intersectThreeQuadric(A, B, cut, e, d);
				t2 = intersectThreeQuadric(B, A, cut, e, d);
				t3 = intersectThreeQuadric(cut, B, A, e, d);
				if (t1 > 0.0 || t2 > 0.0 || t3 > 0.0) { return true;}
			}
			else if (brdfs[i].w == 200.0) {
				t1 = intersectThreeQuadric(A, B, slab, e, d);
				t2 = intersectThreeQuadric(B, A, slab, e, d);
				t4 = intersectThreeQuadric(slab, B, A, e, d);
				if (t1 > 0.0 || t2 > 0.0 || t4 > 0.0) { return true;}
			}
			else if (brdfs[i].w == 110.0) {
				t1 = intersectLacedQuadric(A, B, e, d);
				t2 = intersectClippedQuadric(B, A, e, d);
				if (t1 > 0.0 || t2 > 0.0) { return true;}
			}
			else if (brdfs[i].w > 300.0) {
				continue;
			}
			else {
			//for normal single clipper Quadrics!
				t1 = intersectClippedQuadric(A, B, e, d);
				t2 = intersectClippedQuadric(B, A, e, d);
				if (t1 > 0.0 || t2 > 0.0) { return true;}
			}
		}
		return false;
	}

	//NOTE: Multiple LightSource!!!
	vec4 shading(vec4 d, vec4 r, vec3 normal, vec4 brdf) {
		vec4 finalColor = vec4(0, 0, 0, 0);
		float shadowT; vec4 bestBrdf; mat4 A;
    for (int i=0;i<numLights;i++) {

			vec3 viewDir = normalize((-1.0) * d.xyz);
			vec3 lightDir = lightPos[i].xyz - lightPos[i].w * r.xyz;

			// NOTE: For diff shadow based on where the light source is
			// findBestHit(r+vec4(normal*.001, 0), vec4(normalize(lightDir), 0.0), shadowT, bestBrdf, A);
			// if (shadowT > 0.0 && shadowT*lightPos[i].w < length(lightDir)) {

			// NOTE: for general directional lighting like the sun.
      if (getBestHit(r+vec4(normal*0.001, 0), vec4(normalize(lightDir), 0.0)) && shadow == true) {
			 	finalColor += vec4(0, 0, 0, 1);
			} else {
				vec3 halfWayVec = normalize(viewDir + normalize(lightDir));
				float deviation = max(dot(halfWayVec, normal), 0.0);
				float cosTheta = max(dot(normalize(lightDir), normal), 0.0);

				vec4 powerDensity;
				if (mainDir[i].w == 1.0) {
					powerDensity = lightPowerDensity[i] * pow(max(dot(normalize(mainDir[i].xyz), normalize((-1.0) * lightDir)), 0.0), 35.0);
				} else {
					powerDensity = lightPowerDensity[i];
				}

				vec4 diffuse = vec4 (powerDensity.xyz/(pow(length(lightDir), 2.0)) *
															brdf.xyz * cosTheta, 1);
				finalColor += diffuse;
				if (brdf.w > 0.0 && brdf.w  < 200.0) {
					vec4 specular = vec4 (powerDensity.xyz/(pow(length(lightDir), 2.0)) *
													brdf.xyz * (pow(deviation, brdf.w)), 1);
					finalColor += specular;
				}
			}
		}
		return finalColor;
	}

	vec2 findSkyTexture(vec4 d) {
		//find corresponding point in light probe
    vec3 m = (normalize(d.xyz + vec3(0, 0, 1))) / 2.0;
		//compute this from reflDir as in prev. slide
    vec2 probeTex = vec2(m.x + .5, -m.y + .5);
		return probeTex;
	}

	vec3 noiseGrad(vec3 r) {
	  vec3 s = vec3(7502, 22777, 4767);
	  vec3 f = vec3(0.0, 0.0, 0.0);
	  for(int i=0; i<16; i++) {
	    f += cos( dot(s - vec3(32768, 32768, 32768), r*40.0)
	                   / 10000.0) * (s - vec3(32768, 32768, 32768)) * 40.0;
	    s = mod(s, 32768.0) * 2.0 + floor(s / 32768.0);
	  }
	  return f / 1000000.0;
	}

	float snoise(vec3 r) {
		vec3 s = vec3(7502, 22777, 4767);
		float w = 0.0;
		for(int i=0; i<16; i++) {
			w += sin( dot(s - vec3(32768, 32768, 32768), r * 40.0) / 65536.0);
			s = mod(s, 32768.0) * 2.0 + floor(s / 32768.0);
		}
		return w / 32.0 + 0.5;
	}

	vec3 getColor(vec3 position, float scale, float turbulence, float period, float sharpness) {
		float w = position.x * period + pow(snoise(position * scale), sharpness)*turbulence;
		w -= float(floor(w));  // take fractional part
		return vec3(.8, 0.35, 0) * w + vec3(0.3, 0.1, 0.05) * (1.0-w);
	}

	//NOTE: Multiple LightSouce!!!
	vec4 getBoardTexture(vec4 d, vec4 r, vec3 normal, vec4 brdf, out bool isWood) {
		isWood = false;
		float cellWidth = 1.3;
		float row = floor(r.x/cellWidth);
		float col = floor(r.z/cellWidth);
		if (row < 4.0 && row >= -4.0 && col < 4.0 && col >= -4.0){
			if (mod((row-col), 2.0) == 1.0) {
				return shading(d, r, normal, vec4(0, 0, 0, 0));
			} else {
				return shading(d, r, normal, vec4(.8, .8, .8, 0));
			}
		}
		isWood = true;
		return shading(d, r, normal, vec4(getColor(r.xyz, brdf.x, brdf.y, brdf.z, brdf.w), 1));
	}

	void reflectUpdate(inout vec4 e, inout vec4 d, vec4 r, vec3 normal) {
		e = r + vec4(normal*0.001, 0);
		d = vec4(normalize(reflect(d.xyz, normal)), 0);
	}

	void refractUpdate(inout vec4 e, inout vec4 d, vec4 r, vec3 normal, float refraIndex) {
		// float cosAlpha = dot(-d.xyz, normal);
		// if (cosAlpha < 0.0) {
		// 	cosAlpha = -cosAlpha; normal = -normal; refraIndex = 1.0/refraIndex;
		// }
		// e = r - vec4(normal*0.001, 0);
		// float sinAlphaSqr = 1.0-(pow(cosAlpha, 2.0));
		// float cosBetaSqr = 1.0-(sinAlphaSqr/pow(refraIndex, 2.0));
		// float cosBeta;
		// if (cosBetaSqr < 0.0) {
		// 	cosBeta = 0.0;
		// } else { cosBeta = sqrt(cosBetaSqr);}
		// d = vec4(normalize((d.xyz + normal*cosAlpha)/refraIndex - normal*cosBeta), 0);
		if (dot(-d.xyz, normal) < 0.0) {
			normal = -normal; //refraIndex = 1.0/refraIndex;
		}
		e = r - vec4(normal*0.001, 0);
		d = vec4(refract(d.xyz, normal, 1.0/refraIndex), 0);
	}

	void main(void) {
		//Setup for wood Texture.
		float scale = .5;
    float turbulence = 120.0;
    float period = 5.0;
    float sharpness = 10.5;
		bool isWood = false;
		vec4 woodBrdf = vec4(scale, turbulence, period, sharpness);
		//Setup for eye, ray directions.
    vec4 d = vec4(normalize(rayDir.xyz), 0);
		vec4 e = vec4(cameraPos, 1);
		float t; vec4 brdf; mat4 A;
		//contribution RGB from each level of raytracing
		vec3 contrib = vec3(1, 1, 1);

		for (int i=0;i<5;i++) {
			if (findBestHit(e, d, t, brdf, A)) {
					vec4 r = e + d*t;
					vec3 quadricGrad = (A*r + r*A).xyz;
					vec3 normal = normalize(quadricGrad);
					//Rough materials
					if (brdf.w < 200.0) {
						if (brdf.w == 100.0) {normal = normalize(quadricGrad + noiseGrad(r.xyz));}
						gl_FragColor += shading(d, r, normal, brdf) * vec4(contrib, 1);
						return;
					} else if (brdf.w == 200.0) {
					//Chessboard
						gl_FragColor += getBoardTexture(d, r, normal, woodBrdf, isWood) * vec4(contrib, 1);
						if (isWood) {return;}
						reflectUpdate(e, d, r, normal);
						contrib *= brdf.xyz;
					}	else if (brdf.w < 300.0) {
					//Smooth materials
						// normal = normalize(quadricGrad + noiseGrad(r.xyz));
						reflectUpdate(e, d, r, normal);
						contrib *= brdf.xyz;
					} else if (brdf.w == 300.0){
					//NOTE: Gold with Fresnel Effect!!!!
						//Compute R_0 first;
						vec3 u = vec3(.21, .485, 1.29);
						vec3 k = vec3(3.13, 2.23, 1.76);
						vec3 unitVec = vec3(1,1,1);
						float cosAlpha = dot(-d.xyz, normal);
						vec3 R_0 = ((u-unitVec)*(u-unitVec) + k*k)/((u+unitVec)*(u+unitVec) + k*k);
						//Then compute R - Reflectance, which is contribution.
						vec3 R = R_0 + (unitVec-R_0)*pow((1.0-cosAlpha),5.0);
						//Change normal based on Noise function.
						// normal = normalize(quadricGrad + noiseGrad(r.xyz));
						reflectUpdate(e, d, r, normal);
						contrib *= R;
					} else {
					//Dielectric: Refrections...
						//float refraIndex = brdf.w - 300.0;
						refractUpdate(e, d, r, normal, 1.33);
						contrib *= brdf.xyz;
					}
			} else {
					gl_FragColor += texture2D(probeTexture, findSkyTexture(d)) * vec4(contrib, 1);
					// gl_FragColor += vec4(0.0, 0.0, 0.18, 1.0);
					return;
			}
		}
		return;
	}
`;
